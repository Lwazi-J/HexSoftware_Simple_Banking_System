name: Backend Test & Deploy Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TF_VERSION: 1.3.0
  KUBE_VERSION: 1.25.0
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  NAMESPACE: banking-system
  NODE_PORT: 30080

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Unit Tests
        working-directory: ./backend
        run: |
          ./mvnw clean test
          ./mvnw jacoco:report
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD:

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            ./backend/target/surefire-reports/
            ./backend/target/jacoco-report/

  build-and-deploy:
    needs: backend-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend
        run: |
          docker build -t $DOCKERHUB_USERNAME/banking-backend:$GITHUB_SHA \
            --build-arg ENVIRONMENT=${{ github.event_name == 'pull_request' && 'dev' || 'prod' }} \
            -f backend/Dockerfile .
          docker push $DOCKERHUB_USERNAME/banking-backend:$GITHUB_SHA

      - name: Build and Push Frontend
        run: |
          docker build -t $DOCKERHUB_USERNAME/banking-frontend:$GITHUB_SHA \
            --build-arg VITE_API_BASE_URL=/api \
            -f frontend/Dockerfile .
          docker push $DOCKERHUB_USERNAME/banking-frontend:$GITHUB_SHA

      - name: Set up Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker --memory=4096 --cpus=2
          minikube addons enable ingress
          minikube addons enable metrics-server

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          export TF_VAR_docker_username=$DOCKERHUB_USERNAME
          export TF_VAR_image_tag=$GITHUB_SHA
          export TF_VAR_environment=${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
          export TF_VAR_mysql_root_password=${{ secrets.MYSQL_ROOT_PASSWORD }}
          terraform apply -auto-approve

  access-instructions:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Generate Access Info
        run: |
          echo "=== DEPLOYMENT SUCCESSFUL ===" >> $GITHUB_STEP_SUMMARY
          echo "### Access Methods:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Minikube Tunnel** (Recommended):" >> $GITHUB_STEP_SUMMARY
          echo "   ```bash" >> $GITHUB_STEP_SUMMARY
          echo "   minikube tunnel" >> $GITHUB_STEP_SUMMARY
          echo "   ```" >> $GITHUB_STEP_SUMMARY
          echo "   - Frontend: http://localhost" >> $GITHUB_STEP_SUMMARY
          echo "   - Backend API: http://localhost/api" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "2. **Port Forwarding**:" >> $GITHUB_STEP_SUMMARY
          echo "   ```bash" >> $GITHUB_STEP_SUMMARY
          echo "   kubectl port-forward -n $NAMESPACE svc/frontend 8080:80 &" >> $GITHUB_STEP_SUMMARY
          echo "   kubectl port-forward -n $NAMESPACE svc/backend 8081:8080 &" >> $GITHUB_STEP_SUMMARY
          echo "   ```" >> $GITHUB_STEP_SUMMARY
          echo "   - Frontend: http://localhost:8080" >> $GITHUB_STEP_SUMMARY
          echo "   - Backend: http://localhost:8081/api" >> $GITHUB_STEP_SUMMARY

      - name: Verify Deployment
        run: |
          kubectl wait --for=condition=available \
            --timeout=300s \
            -n $NAMESPACE \
            deployment/frontend deployment/backend