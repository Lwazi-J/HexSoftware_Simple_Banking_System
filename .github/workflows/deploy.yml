name: CI/CD Pipeline (Immediate)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  TF_VERSION: 1.5.0
  KUBE_VERSION: 1.28.0
  NAMESPACE: banking-system
  NODE_PORT: 30080

jobs:
  backend-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Unit Tests
        working-directory: ./backend
        run: |
          ./mvnw clean test
          ./mvnw jacoco:report
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            ./backend/target/surefire-reports/
            ./backend/target/jacoco-report/
          retention-days: 7

  build-images:
    needs: backend-unit-tests
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend
        run: |
          docker buildx build --push \
            -t $DOCKERHUB_USERNAME/banking-backend:$GITHUB_SHA \
            --build-arg ENVIRONMENT=${{ github.event_name == 'pull_request' && 'dev' || 'prod' }} \
            -f backend/Dockerfile .

      - name: Build and Push Frontend
        run: |
          docker buildx build --push \
            -t $DOCKERHUB_USERNAME/banking-frontend:$GITHUB_SHA \
            --build-arg VITE_API_BASE_URL=/api \
            -f frontend/Dockerfile .

  terraform-deploy:
    needs: build-images
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/
          minikube start --driver=docker --memory=4096 --cpus=2
          minikube addons enable ingress
          minikube addons enable metrics-server

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v$KUBE_VERSION/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          export TF_VAR_docker_username=$DOCKERHUB_USERNAME
          export TF_VAR_image_tag=$GITHUB_SHA
          export TF_VAR_environment=${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
          export TF_VAR_mysql_root_password=$MYSQL_ROOT_PASSWORD
          terraform apply -auto-approve

  verify-deployment:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check Pod Status
        run: |
          kubectl get pods -n $NAMESPACE
          timeout 300 bash -c "while ! kubectl get pods -n $NAMESPACE -l app=backend -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -q True; do sleep 5; done"
          timeout 300 bash -c "while ! kubectl get pods -n $NAMESPACE -l app=frontend -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -q True; do sleep 5; done"

      - name: Run Smoke Tests
        run: |
          kubectl exec -n $NAMESPACE $(kubectl get pods -n $NAMESPACE -l app=backend -o jsonpath='{.items[0].metadata.name}') -- \
            curl -sSf http://localhost:8080/actuator/health
          kubectl exec -n $NAMESPACE $(kubectl get pods -n $NAMESPACE -l app=frontend -o jsonpath='{.items[0].metadata.name}') -- \
            curl -sSf http://localhost:80

  access-instructions:
    needs: verify-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Generate Access Info
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "### ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "#### Access Methods:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Minikube Tunnel** (Recommended)" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'minikube tunnel' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: http://localhost" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: http://localhost/api" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "2. **Port Forwarding**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n $NAMESPACE svc/frontend 8080:80 &" >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n $NAMESPACE svc/backend 8081:8080 &" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: http://localhost:8080" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: http://localhost:8081/api" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "3. **Direct NodePort Access**" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: http://$MINIKUBE_IP:$NODE_PORT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> **Note**: Minikube tunnel requires running in a separate terminal" >> $GITHUB_STEP_SUMMARY